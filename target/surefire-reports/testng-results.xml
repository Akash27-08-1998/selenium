<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="12" passed="11">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="38601" started-at="2020-10-14T11:21:57Z" finished-at="2020-10-14T11:22:36Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="38601" started-at="2020-10-14T11:21:57Z" finished-at="2020-10-14T11:22:36Z">
      <class name="com.test.regression">
        <test-method status="PASS" signature="invokeBrowser()[pri:0, instance:com.test.regression@6df7988f]" name="invokeBrowser" is-config="true" duration-ms="15122" started-at="2020-10-14T11:21:57Z" finished-at="2020-10-14T11:22:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeBrowser -->
        <test-method status="PASS" signature="regression_verifyTitle()[pri:0, instance:com.test.regression@6df7988f]" name="regression_verifyTitle" duration-ms="254" started-at="2020-10-14T11:22:13Z" finished-at="2020-10-14T11:22:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regression_verifyTitle -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="312" started-at="2020-10-14T11:22:13Z" finished-at="2020-10-14T11:22:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regression_verifyTitle status=SUCCESS method=regression.regression_verifyTitle()[pri:0, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step1()[pri:1, instance:com.test.regression@6df7988f]" name="step1" duration-ms="7568" started-at="2020-10-14T11:22:13Z" finished-at="2020-10-14T11:22:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step1 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="46" started-at="2020-10-14T11:22:21Z" finished-at="2020-10-14T11:22:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step1 status=SUCCESS method=regression.step1()[pri:1, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step2()[pri:2, instance:com.test.regression@6df7988f]" name="step2" duration-ms="6147" started-at="2020-10-14T11:22:21Z" finished-at="2020-10-14T11:22:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step2 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="31" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step2 status=SUCCESS method=regression.step2()[pri:2, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step3()[pri:3, instance:com.test.regression@6df7988f]" name="step3" duration-ms="171" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step3 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="28" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step3 status=SUCCESS method=regression.step3()[pri:3, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step4()[pri:4, instance:com.test.regression@6df7988f]" name="step4" duration-ms="128" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step4 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="27" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step4 status=SUCCESS method=regression.step4()[pri:4, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step5()[pri:5, instance:com.test.regression@6df7988f]" name="step5" duration-ms="5683" started-at="2020-10-14T11:22:27Z" finished-at="2020-10-14T11:22:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step5 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="31" started-at="2020-10-14T11:22:33Z" finished-at="2020-10-14T11:22:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step5 status=SUCCESS method=regression.step5()[pri:5, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="step6()[pri:6, instance:com.test.regression@6df7988f]" name="step6" duration-ms="2221" started-at="2020-10-14T11:22:33Z" finished-at="2020-10-14T11:22:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- step6 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.regression@6df7988f]" name="flush" is-config="true" duration-ms="26" started-at="2020-10-14T11:22:35Z" finished-at="2020-10-14T11:22:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=step6 status=SUCCESS method=regression.step6()[pri:6, instance:com.test.regression@6df7988f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="closing()[pri:0, instance:com.test.regression@6df7988f]" name="closing" is-config="true" duration-ms="620" started-at="2020-10-14T11:22:35Z" finished-at="2020-10-14T11:22:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closing -->
      </class> <!-- com.test.regression -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
  <suite name="Suite (1)" duration-ms="14720" started-at="2020-10-14T11:22:54Z" finished-at="2020-10-14T11:23:08Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="14720" started-at="2020-10-14T11:22:54Z" finished-at="2020-10-14T11:23:08Z">
      <class name="com.test.negative">
        <test-method status="PASS" signature="invokeBrowser()[pri:0, instance:com.test.negative@5d1e09bc]" name="invokeBrowser" is-config="true" duration-ms="9674" started-at="2020-10-14T11:22:54Z" finished-at="2020-10-14T11:23:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeBrowser -->
        <test-method status="FAIL" signature="signIn(java.lang.String, java.lang.String)[pri:0, instance:com.test.negative@5d1e09bc]" name="signIn" duration-ms="4005" started-at="2020-10-14T11:23:03Z" data-provider="getData" finished-at="2020-10-14T11:23:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[akashrinki@yahoo.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[aksjksdj]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The webpage is not Correct expected [My account - My Store] but found [Login - My Store]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The webpage is not Correct expected [My account - My Store] but found [Login - My Store]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:453)
at com.test.negative.signIn(negative.java:57)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signIn -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.negative@5d1e09bc]" name="flush" is-config="true" duration-ms="347" started-at="2020-10-14T11:23:07Z" finished-at="2020-10-14T11:23:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signIn status=FAILURE method=negative.signIn(java.lang.String, java.lang.String)[pri:0, instance:com.test.negative@5d1e09bc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="closing()[pri:0, instance:com.test.negative@5d1e09bc]" name="closing" is-config="true" duration-ms="657" started-at="2020-10-14T11:23:08Z" finished-at="2020-10-14T11:23:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closing -->
      </class> <!-- com.test.negative -->
    </test> <!-- Test -->
  </suite> <!-- Suite (1) -->
  <suite name="Suite (0)" duration-ms="17636" started-at="2020-10-14T11:22:36Z" finished-at="2020-10-14T11:22:54Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="17636" started-at="2020-10-14T11:22:36Z" finished-at="2020-10-14T11:22:54Z">
      <class name="com.test.smoke">
        <test-method status="PASS" signature="invokeBrowser()[pri:0, instance:com.test.smoke@5972d253]" name="invokeBrowser" is-config="true" duration-ms="9398" started-at="2020-10-14T11:22:36Z" finished-at="2020-10-14T11:22:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeBrowser -->
        <test-method status="PASS" signature="smoke_verifyTitle()[pri:0, instance:com.test.smoke@5972d253]" name="smoke_verifyTitle" duration-ms="14" started-at="2020-10-14T11:22:45Z" finished-at="2020-10-14T11:22:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- smoke_verifyTitle -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.smoke@5972d253]" name="flush" is-config="true" duration-ms="12" started-at="2020-10-14T11:22:45Z" finished-at="2020-10-14T11:22:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=smoke_verifyTitle status=SUCCESS method=smoke.smoke_verifyTitle()[pri:0, instance:com.test.smoke@5972d253] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="smoke0()[pri:1, instance:com.test.smoke@5972d253]" name="smoke0" duration-ms="4940" started-at="2020-10-14T11:22:45Z" finished-at="2020-10-14T11:22:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- smoke0 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.smoke@5972d253]" name="flush" is-config="true" duration-ms="22" started-at="2020-10-14T11:22:50Z" finished-at="2020-10-14T11:22:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=smoke0 status=SUCCESS method=smoke.smoke0()[pri:1, instance:com.test.smoke@5972d253] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="smoke1()[pri:2, instance:com.test.smoke@5972d253]" name="smoke1" duration-ms="84" started-at="2020-10-14T11:22:50Z" finished-at="2020-10-14T11:22:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- smoke1 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.smoke@5972d253]" name="flush" is-config="true" duration-ms="36" started-at="2020-10-14T11:22:50Z" finished-at="2020-10-14T11:22:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=smoke1 status=SUCCESS method=smoke.smoke1()[pri:2, instance:com.test.smoke@5972d253] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="smoke2()[pri:3, instance:com.test.smoke@5972d253]" name="smoke2" duration-ms="2373" started-at="2020-10-14T11:22:50Z" finished-at="2020-10-14T11:22:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- smoke2 -->
        <test-method status="PASS" signature="flush(org.testng.ITestResult)[pri:0, instance:com.test.smoke@5972d253]" name="flush" is-config="true" duration-ms="31" started-at="2020-10-14T11:22:53Z" finished-at="2020-10-14T11:22:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=smoke2 status=SUCCESS method=smoke.smoke2()[pri:3, instance:com.test.smoke@5972d253] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flush -->
        <test-method status="PASS" signature="closing()[pri:0, instance:com.test.smoke@5972d253]" name="closing" is-config="true" duration-ms="720" started-at="2020-10-14T11:22:53Z" finished-at="2020-10-14T11:22:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closing -->
      </class> <!-- com.test.smoke -->
    </test> <!-- Test -->
  </suite> <!-- Suite (0) -->
</testng-results>
